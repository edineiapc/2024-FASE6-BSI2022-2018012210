import crypto from 'crypto'
import express from 'express'
import cors from 'cors'

const app = express()

app.use(cors())
app.use(express.json())

const listaDeUsuariosRegistrados = [
  { id: 1, nome: 'u1', senha: 'p1' },
  { id: 2, nome: 'u2', senha: 'p1' },
]

let listaDeTokensGerados: { [k: string]: { id: number, nome: string } } = {
  // 
}

const isLogged: express.RequestHandler = (req, res, next) => {
  const token = req.headers.authorization
  if (!token)
    return res.status(401).json({ message: 'Token not found' })
  if (!listaDeTokensGerados[token])
    return res.status(401).json({ message: 'Invalid token' })
  next()
}

app.post('/login', (req, res) => {
  const { nome, senha } = req.body
  const usuarioEncontrado = listaDeUsuariosRegistrados.find(usuario => usuario.nome === nome && usuario.senha === senha)
  if (usuarioEncontrado === undefined)
    return res.status(401).json({ message: 'Invalid user' })
  const token = crypto.randomUUID()
  listaDeTokensGerados[token] = { nome, id: usuarioEncontrado.id }
  return res.status(200).json({ token })
})

app.post('/logout', (req, res) => {
  const token = req.headers.authorization
  if (!token)
    return res.status(401).json({ message: 'Token not found' })
  if (!listaDeTokensGerados[token])
    return res.status(401).json({ message: 'Invalid token' })
  delete listaDeTokensGerados[token]
  return res.status(200).json({ message: 'Logout success' })
})

app.post('/check', isLogged, (req, res) => {
  return res.status(200).json({ message: "DEU CERTO JOW!" })
})

app.post('/check2', isLogged, (req, res) => {
  return res.status(200).json({ message: "DEU CERTO JOW! TAMBÉM" })
})

app.listen(3333, () => console.log(`⚡ Server is running on port ${PORT}`))
import jwt from 'jsonwebtoken'

const secret = 'sua chave secreata aqui'
const expiresIn = '1h'
const payload = {
  data: {
    nome: 'Daniel de Andrade Varela',
    id: 1
  }
}

// transforma as funções em promessasX
const sign = (payload: any, secret: string): Promise<string> => new Promise((r, x) => jwt.sign(payload, secret, { expiresIn }, (err, token) => err ? x(err) : r(<string>token)))
const verify = (token: string, secret: string): Promise<any> => new Promise((r, x) => jwt.verify(token, secret, (err, decoded) => err ? x(err) : r(decoded)))

// transforma as funções em promessas, código mais legiveis
function sign_(payload: any, secret: string): Promise<string> {
  return new Promise((resolve, reject) => {
    jwt.sign(payload, secret, { expiresIn }, (err, token) => {
      if (err) return reject(err)
      resolve(token as string)
    })
  })
}

function verify_(token: string, secret: string): Promise<any> {
  return new Promise((resolve, reject) => {
    jwt.verify(token, secret, (err, decoded) => {
      if (err) return reject(err)
      resolve(decoded)
    })
  })
}

// exemplo de uso
void async function () {
  try {
    const token = await sign(payload, secret)
    console.log(token)
    
    const decoded = jwt.decode(token)
    console.log(decoded)
    
    const dataVerified = await verify(token, secret)
    console.log(dataVerified)
  } catch (error) {
    if (error instanceof jwt.TokenExpiredError)
      return console.error('Token expired')
    
    if (error instanceof jwt.NotBeforeError)
      return console.error('Token not before')
    
    if (error instanceof jwt.JsonWebTokenError)
      return console.error('Invalid token')
    
    console.error(error)
  }
}();